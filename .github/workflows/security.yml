name: 🔒 Security & Dependency Updates

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/package.json'
      - '**/package-lock.json'
      - 'Dockerfile*'
      - 'docker-compose*.yml'

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Frontend Audit
        run: |
          npm audit --audit-level=moderate --production || true
          npm audit fix --force || true

      - name: 📦 Backend Audit
        run: |
          cd backend
          npm audit --audit-level=moderate --production || true
          npm audit fix --force || true

      - name: 📊 Generate Security Report
        run: |
          echo "## 🔒 Security Audit Report" > security-report.md
          echo "Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Frontend Dependencies" >> security-report.md
          echo "\`\`\`" >> security-report.md
          npm audit --json | jq '.vulnerabilities | length' >> security-report.md || echo "No vulnerabilities found" >> security-report.md
          echo "\`\`\`" >> security-report.md
          echo "" >> security-report.md
          
          echo "### Backend Dependencies" >> security-report.md
          echo "\`\`\`" >> security-report.md
          cd backend
          npm audit --json | jq '.vulnerabilities | length' >> ../security-report.md || echo "No vulnerabilities found" >> ../security-report.md
          echo "\`\`\`" >> ../security-report.md

      - name: 📊 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # Container Security Scanning
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔧 Build Backend Image for Scanning
        run: |
          docker build -t desicargo-backend:scan ./backend

      - name: 🔧 Build Frontend Image for Scanning
        run: |
          docker build -t desicargo-frontend:scan .

      - name: 🔍 Scan Backend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'desicargo-backend:scan'
          format: 'sarif'
          output: 'backend-security.sarif'

      - name: 🔍 Scan Frontend Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'desicargo-frontend:scan'
          format: 'sarif'
          output: 'frontend-security.sarif'

      - name: 📊 Upload Backend Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-security.sarif'
          category: 'backend-container'

      - name: 📊 Upload Frontend Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'frontend-security.sarif'
          category: 'frontend-container'

  # Automated Dependency Updates
  dependency-update:
    name: 🔄 Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔄 Update Frontend Dependencies
        run: |
          npm update
          npm audit fix --force || true

      - name: 🔄 Update Backend Dependencies
        run: |
          cd backend
          npm update
          npm audit fix --force || true

      - name: 🧪 Test After Updates
        run: |
          # Frontend build test
          npm run build || exit 1
          
          # Backend build test
          cd backend
          npm run build || exit 1

      - name: 📝 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: '🔄 chore: update dependencies and fix security vulnerabilities'
          title: '🔄 Automated Dependency Updates'
          body: |
            ## 🔄 Automated Dependency Updates
            
            This PR contains automated dependency updates and security fixes.
            
            ### Changes Made:
            - ⬆️ Updated npm dependencies to latest compatible versions
            - 🔒 Applied security fixes for known vulnerabilities
            - ✅ Verified builds pass with updated dependencies
            
            ### Testing:
            - [x] Frontend build successful
            - [x] Backend build successful
            - [ ] Manual testing required
            
            ### Security Fixes:
            See the security audit report for details on vulnerabilities addressed.
            
            **Note:** This PR was created automatically. Please review changes before merging.
          branch: automated/dependency-updates
          labels: |
            dependencies
            security
            automated
          reviewers: |
            ${{ github.repository_owner }}

  # Docker Base Image Updates
  base-image-check:
    name: 🐳 Check Base Image Updates
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Check Node.js Updates
        run: |
          current_version=$(grep -o 'FROM node:[0-9.-]*' backend/Dockerfile | cut -d: -f2)
          latest_version=$(curl -s https://registry.hub.docker.com/v2/repositories/library/node/tags | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | sort -V | tail -1)
          
          echo "Current Node.js version: $current_version"
          echo "Latest Node.js version: $latest_version"
          
          if [ "$current_version" != "$latest_version" ]; then
            echo "Node.js base image update available: $current_version -> $latest_version"
            echo "NODE_UPDATE_AVAILABLE=true" >> $GITHUB_ENV
            echo "CURRENT_NODE=$current_version" >> $GITHUB_ENV
            echo "LATEST_NODE=$latest_version" >> $GITHUB_ENV
          fi

      - name: 🔍 Check Nginx Updates
        run: |
          current_version=$(grep -o 'FROM nginx:[a-z0-9.-]*' Dockerfile | cut -d: -f2)
          latest_version=$(curl -s https://registry.hub.docker.com/v2/repositories/library/nginx/tags | jq -r '.results[] | select(.name == "alpine") | .name')
          
          echo "Current Nginx version: $current_version"
          echo "Latest Nginx version: $latest_version"

      - name: 📝 Create Base Image Update Issue
        if: env.NODE_UPDATE_AVAILABLE == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const title = '🐳 Docker Base Image Update Available';
            const body = `## 🐳 Docker Base Image Updates Available
            
            ### Node.js Update
            - **Current**: \`node:${{ env.CURRENT_NODE }}\`
            - **Latest**: \`node:${{ env.LATEST_NODE }}\`
            
            ### Recommended Actions:
            1. Update Dockerfile to use latest Node.js version
            2. Test application with new base image
            3. Update CI/CD pipelines if necessary
            4. Verify security improvements
            
            ### Files to Update:
            - \`backend/Dockerfile\`
            - \`Dockerfile\` (frontend)
            - CI/CD workflows if needed
            
            This issue was created automatically by the security workflow.`;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'docker,security,automated'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes('Docker Base Image Update')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['docker', 'security', 'automated', 'enhancement']
              });
            }

  # Secret Scanning
  secret-scan:
    name: 🕵️ Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: 🔍 Scan for Secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: 📊 Generate Secret Scan Report
        if: always()
        run: |
          echo "## 🕵️ Secret Scan Report" > secret-scan-report.md
          echo "Generated on: $(date)" >> secret-scan-report.md
          echo "" >> secret-scan-report.md
          echo "Secret scanning completed for repository." >> secret-scan-report.md
          echo "Review GitHub Security tab for any findings." >> secret-scan-report.md

      - name: 📊 Upload Secret Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-report
          path: secret-scan-report.md
          retention-days: 30

  # Security Summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secret-scan]
    if: always()

    steps:
      - name: 📥 Download All Reports
        uses: actions/download-artifact@v4
        with:
          path: reports/

      - name: 📊 Generate Security Dashboard
        run: |
          echo "# 🔒 Security Dashboard" > security-dashboard.md
          echo "" >> security-dashboard.md
          echo "## Scan Results Summary" >> security-dashboard.md
          echo "" >> security-dashboard.md
          echo "| Scan Type | Status | Details |" >> security-dashboard.md
          echo "|-----------|--------|---------|" >> security-dashboard.md
          echo "| Dependencies | ${{ needs.dependency-scan.result }} | Check artifacts for details |" >> security-dashboard.md
          echo "| Container Images | ${{ needs.container-scan.result }} | Review Security tab |" >> security-dashboard.md
          echo "| Secret Scanning | ${{ needs.secret-scan.result }} | Review Security tab |" >> security-dashboard.md
          echo "" >> security-dashboard.md
          echo "Generated on: $(date)" >> security-dashboard.md

      - name: 📊 Upload Security Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-dashboard
          path: security-dashboard.md
          retention-days: 30

      - name: 📧 Notify Security Team
        if: needs.dependency-scan.result == 'failure' || needs.container-scan.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#security-alerts'
          text: |
            🚨 Security Scan Alert
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            
            Failed Scans:
            ${{ needs.dependency-scan.result == 'failure' && '- Dependency Scan' || '' }}
            ${{ needs.container-scan.result == 'failure' && '- Container Scan' || '' }}
            
            Please review the security findings in the GitHub Security tab.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}