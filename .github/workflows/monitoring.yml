name: üìä Monitoring & Health Checks

on:
  schedule:
    # Health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check to run'
        required: true
        type: choice
        options:
          - full
          - api
          - database
          - performance
      environment:
        description: 'Environment to check'
        required: true
        type: choice
        options:
          - staging
          - production
          - both

env:
  NODE_VERSION: '18'

jobs:
  # API Health Checks
  api-health-check:
    name: üåê API Health Check
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event.inputs.check_type == 'full' ||
      github.event.inputs.check_type == 'api'

    strategy:
      matrix:
        environment: ${{ github.event_name == 'schedule' && fromJson('["staging", "production"]') || (github.event.inputs.environment == 'both' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'staging'))) }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üè• Basic Health Check
        id: health_check
        run: |
          environment="${{ matrix.environment }}"
          
          if [ "$environment" = "production" ]; then
            api_url="https://api.desicargo.com"
            frontend_url="https://app.desicargo.com"
          else
            api_url="https://api-staging.desicargo.com"
            frontend_url="https://staging.desicargo.com"
          fi
          
          echo "Checking $environment environment..."
          
          # API Health Check
          api_response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" "$api_url/health" || echo "000:0")
          api_status=$(echo $api_response | cut -d: -f1)
          api_time=$(echo $api_response | cut -d: -f2)
          
          # Frontend Health Check
          frontend_response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" "$frontend_url" || echo "000:0")
          frontend_status=$(echo $frontend_response | cut -d: -f1)
          frontend_time=$(echo $frontend_response | cut -d: -f2)
          
          echo "API_STATUS=$api_status" >> $GITHUB_OUTPUT
          echo "API_TIME=$api_time" >> $GITHUB_OUTPUT
          echo "FRONTEND_STATUS=$frontend_status" >> $GITHUB_OUTPUT
          echo "FRONTEND_TIME=$frontend_time" >> $GITHUB_OUTPUT
          echo "ENVIRONMENT=$environment" >> $GITHUB_OUTPUT
          
          # Set overall health
          if [ "$api_status" = "200" ] && [ "$frontend_status" = "200" ]; then
            echo "HEALTH_STATUS=healthy" >> $GITHUB_OUTPUT
          else
            echo "HEALTH_STATUS=unhealthy" >> $GITHUB_OUTPUT
          fi

      - name: üîç Detailed API Check
        if: steps.health_check.outputs.API_STATUS == '200'
        run: |
          environment="${{ matrix.environment }}"
          
          if [ "$environment" = "production" ]; then
            api_url="https://api.desicargo.com"
          else
            api_url="https://api-staging.desicargo.com"
          fi
          
          echo "Running detailed API checks..."
          
          # Check detailed health endpoint
          detailed_response=$(curl -s "$api_url/health/detailed" || echo '{}')
          echo "Detailed health response: $detailed_response"
          
          # Check if database is healthy
          db_status=$(echo "$detailed_response" | jq -r '.database.status // "unknown"')
          echo "Database status: $db_status"
          
          # Check Redis status
          redis_status=$(echo "$detailed_response" | jq -r '.redis.connected // false')
          echo "Redis status: $redis_status"
          
          # Check Sentry status
          sentry_status=$(echo "$detailed_response" | jq -r '.sentry.enabled // false')
          echo "Sentry status: $sentry_status"

      - name: üìä Log Health Metrics
        run: |
          cat << EOF > health-metrics-${{ matrix.environment }}.json
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ steps.health_check.outputs.ENVIRONMENT }}",
            "api": {
              "status": ${{ steps.health_check.outputs.API_STATUS }},
              "response_time": ${{ steps.health_check.outputs.API_TIME }}
            },
            "frontend": {
              "status": ${{ steps.health_check.outputs.FRONTEND_STATUS }},
              "response_time": ${{ steps.health_check.outputs.FRONTEND_TIME }}
            },
            "overall_health": "${{ steps.health_check.outputs.HEALTH_STATUS }}"
          }
          EOF

      - name: üìä Upload Health Metrics
        uses: actions/upload-artifact@v4
        with:
          name: health-metrics-${{ matrix.environment }}
          path: health-metrics-${{ matrix.environment }}.json
          retention-days: 7

      - name: üö® Alert on Health Issues
        if: steps.health_check.outputs.HEALTH_STATUS == 'unhealthy'
        uses: 8398a7/action-slack@v3
        with:
          status: 'failure'
          channel: '#alerts'
          text: |
            üö® Health Check Alert - ${{ matrix.environment }}
            
            Environment: ${{ matrix.environment }}
            API Status: ${{ steps.health_check.outputs.API_STATUS }} (${{ steps.health_check.outputs.API_TIME }}s)
            Frontend Status: ${{ steps.health_check.outputs.FRONTEND_STATUS }} (${{ steps.health_check.outputs.FRONTEND_TIME }}s)
            
            Time: $(date)
            
            Please investigate immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Database Performance Monitoring
  database-monitoring:
    name: üóÑÔ∏è Database Monitoring
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event.inputs.check_type == 'full' ||
      github.event.inputs.check_type == 'database'

    strategy:
      matrix:
        environment: ${{ github.event_name == 'schedule' && fromJson('["staging", "production"]') || (github.event.inputs.environment == 'both' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'staging'))) }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install Supabase CLI
        run: npm install -g supabase

      - name: üóÑÔ∏è Database Health Check
        run: |
          environment="${{ matrix.environment }}"
          
          export SUPABASE_ACCESS_TOKEN="${{ secrets.SUPABASE_ACCESS_TOKEN }}"
          
          if [ "$environment" = "production" ]; then
            project_ref="${{ secrets.PRODUCTION_PROJECT_REF }}"
          else
            project_ref="${{ secrets.STAGING_PROJECT_REF }}"
          fi
          
          echo "Checking database health for $environment..."
          
          # Basic connectivity test
          start_time=$(date +%s%N)
          supabase db ping --project-ref $project_ref || echo "Database ping failed"
          end_time=$(date +%s%N)
          
          response_time=$(( (end_time - start_time) / 1000000 ))  # Convert to milliseconds
          echo "Database response time: ${response_time}ms"
          
          echo "DB_RESPONSE_TIME=$response_time" >> $GITHUB_ENV

      - name: üìä Database Metrics
        run: |
          environment="${{ matrix.environment }}"
          
          # Generate database metrics report
          cat << EOF > db-metrics-$environment.json
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "$environment",
            "database": {
              "response_time_ms": ${{ env.DB_RESPONSE_TIME }},
              "status": "healthy"
            }
          }
          EOF

      - name: üìä Upload Database Metrics
        uses: actions/upload-artifact@v4
        with:
          name: database-metrics-${{ matrix.environment }}
          path: db-metrics-${{ matrix.environment }}.json
          retention-days: 7

      - name: üö® Alert on Database Issues
        if: env.DB_RESPONSE_TIME > '5000'  # Alert if response time > 5 seconds
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#alerts'
          text: |
            ‚ö†Ô∏è Database Performance Alert - ${{ matrix.environment }}
            
            Environment: ${{ matrix.environment }}
            Response Time: ${{ env.DB_RESPONSE_TIME }}ms
            Threshold: 5000ms
            
            Database may be experiencing performance issues.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Monitoring
  performance-monitoring:
    name: ‚ö° Performance Monitoring
    runs-on: ubuntu-latest
    if: |
      github.event.inputs.check_type == 'full' ||
      github.event.inputs.check_type == 'performance'

    strategy:
      matrix:
        environment: ${{ github.event.inputs.environment == 'both' && fromJson('["staging", "production"]') || fromJson(format('["{0}"]', github.event.inputs.environment || 'staging')) }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: ‚ö° Run Performance Tests
        run: |
          environment="${{ matrix.environment }}"
          
          if [ "$environment" = "production" ]; then
            api_url="https://api.desicargo.com"
          else
            api_url="https://api-staging.desicargo.com"
          fi
          
          # Create basic performance test
          cat << 'EOF' > performance-test.js
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          
          export let options = {
            stages: [
              { duration: '30s', target: 5 },   // Ramp up to 5 users
              { duration: '1m', target: 5 },    // Stay at 5 users
              { duration: '30s', target: 0 },   // Ramp down
            ],
            thresholds: {
              http_req_duration: ['p(95)<2000'], // 95% of requests under 2s
              http_req_failed: ['rate<0.1'],     // Error rate under 10%
            },
          };
          
          export default function() {
            const response = http.get(`${__ENV.API_URL}/health`);
            
            check(response, {
              'status is 200': (r) => r.status === 200,
              'response time < 1000ms': (r) => r.timings.duration < 1000,
            });
            
            sleep(1);
          }
          EOF
          
          # Run performance test
          API_URL="$api_url" k6 run --summary-export=performance-results-$environment.json performance-test.js

      - name: üìä Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ matrix.environment }}
          path: performance-results-${{ matrix.environment }}.json
          retention-days: 7

      - name: üìä Analyze Performance Results
        run: |
          environment="${{ matrix.environment }}"
          
          if [ -f "performance-results-$environment.json" ]; then
            # Extract key metrics
            avg_duration=$(jq -r '.metrics.http_req_duration.values.avg' performance-results-$environment.json)
            p95_duration=$(jq -r '.metrics.http_req_duration.values["p(95)"]' performance-results-$environment.json)
            error_rate=$(jq -r '.metrics.http_req_failed.values.rate' performance-results-$environment.json)
            
            echo "Performance Results for $environment:"
            echo "Average Duration: ${avg_duration}ms"
            echo "P95 Duration: ${p95_duration}ms"
            echo "Error Rate: ${error_rate}%"
            
            # Check thresholds
            if (( $(echo "$p95_duration > 2000" | bc -l) )); then
              echo "PERFORMANCE_ALERT=true" >> $GITHUB_ENV
              echo "PERFORMANCE_ISSUE=P95 response time (${p95_duration}ms) exceeds 2000ms threshold" >> $GITHUB_ENV
            fi
            
            if (( $(echo "$error_rate > 0.1" | bc -l) )); then
              echo "PERFORMANCE_ALERT=true" >> $GITHUB_ENV
              echo "PERFORMANCE_ISSUE=Error rate (${error_rate}%) exceeds 10% threshold" >> $GITHUB_ENV
            fi
          fi

      - name: üö® Alert on Performance Issues
        if: env.PERFORMANCE_ALERT == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#alerts'
          text: |
            ‚ö° Performance Alert - ${{ matrix.environment }}
            
            Environment: ${{ matrix.environment }}
            Issue: ${{ env.PERFORMANCE_ISSUE }}
            
            Please review performance metrics and investigate potential bottlenecks.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # SSL Certificate Monitoring
  ssl-monitoring:
    name: üîí SSL Certificate Monitoring
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      github.event.inputs.check_type == 'full'

    steps:
      - name: üîí Check SSL Certificates
        run: |
          domains=("app.desicargo.com" "api.desicargo.com" "staging.desicargo.com" "api-staging.desicargo.com")
          
          for domain in "${domains[@]}"; do
            echo "Checking SSL certificate for $domain..."
            
            # Get certificate expiry date
            expiry_date=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -enddate 2>/dev/null | cut -d= -f2)
            
            if [ -n "$expiry_date" ]; then
              expiry_timestamp=$(date -d "$expiry_date" +%s)
              current_timestamp=$(date +%s)
              days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
              
              echo "$domain: $days_until_expiry days until expiry"
              
              # Alert if certificate expires within 30 days
              if [ $days_until_expiry -lt 30 ]; then
                echo "SSL_ALERT=true" >> $GITHUB_ENV
                echo "SSL_DOMAIN=$domain" >> $GITHUB_ENV
                echo "SSL_DAYS=$days_until_expiry" >> $GITHUB_ENV
              fi
            else
              echo "Failed to check certificate for $domain"
            fi
          done

      - name: üö® Alert on SSL Issues
        if: env.SSL_ALERT == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          channel: '#alerts'
          text: |
            üîí SSL Certificate Alert
            
            Domain: ${{ env.SSL_DOMAIN }}
            Days until expiry: ${{ env.SSL_DAYS }}
            
            Please renew the SSL certificate before it expires!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Monitoring Summary
  monitoring-summary:
    name: üìã Monitoring Summary
    runs-on: ubuntu-latest
    needs: [api-health-check, database-monitoring]
    if: always() && github.event_name == 'schedule'

    steps:
      - name: üì• Download All Metrics
        uses: actions/download-artifact@v4
        with:
          path: metrics/

      - name: üìä Generate Monitoring Report
        run: |
          echo "# üìä Monitoring Summary Report" > monitoring-report.md
          echo "" >> monitoring-report.md
          echo "Generated: $(date)" >> monitoring-report.md
          echo "" >> monitoring-report.md
          
          # Process health metrics
          echo "## Health Check Results" >> monitoring-report.md
          echo "" >> monitoring-report.md
          
          for env in staging production; do
            if [ -f "metrics/health-metrics-${env}/health-metrics-${env}.json" ]; then
              api_status=$(jq -r '.api.status' "metrics/health-metrics-${env}/health-metrics-${env}.json")
              api_time=$(jq -r '.api.response_time' "metrics/health-metrics-${env}/health-metrics-${env}.json")
              overall_health=$(jq -r '.overall_health' "metrics/health-metrics-${env}/health-metrics-${env}.json")
              
              echo "### $env Environment" >> monitoring-report.md
              echo "- **Status**: $overall_health" >> monitoring-report.md
              echo "- **API Response**: ${api_status} (${api_time}s)" >> monitoring-report.md
              echo "" >> monitoring-report.md
            fi
          done

      - name: üìä Upload Monitoring Report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-summary-report
          path: monitoring-report.md
          retention-days: 30